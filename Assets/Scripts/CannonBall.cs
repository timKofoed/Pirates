using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CannonBall : MonoBehaviour {

	/// <summary>
	/// The smoke generated by this projectile
	/// </summary>
	public ParticleSystem smoke, splash;
	private float timeOfInstantiation;
	private GameObject parentCannon;

	// Use this for initialization
	void Start () {

	}

	// Update is called once per frame
	void Update () {


	}

	public void SetParentCannon(GameObject parent)
	{
		parentCannon = parent;
	}

//	void OnTriggerEnter(Collider other) {
//		Debug.Log("OnTriggerEnter: " + other.name);
//
//	}

	void OnCollisionEnter(Collision collision)
	{
        Debug.Log("OnCollisionEnter: " + collision.collider.name);

        // When the cannon ball collides with something, then apply damage (and instantiate a hit-particle-system), and remove the cannon ball
        // Attempt to send damage to the object hit, but if it doesn't respond, then we don't care
        collision.gameObject.BroadcastMessage("ReceiveDamage", 1, SendMessageOptions.DontRequireReceiver);

		// Disconnect the smoke from the projectile after the particle system is done making all its particles using the projectile's speed
		if (smoke != null)
		{
			smoke.transform.SetParent(parentCannon.transform, false);	
		}

		if (collision.gameObject.tag == "Water")
		{
			GameObject splashClone = GameObject.Instantiate(splash.gameObject, collision.contacts[0].point, Quaternion.identity, null);
			splashClone.transform.localEulerAngles = new Vector3 (-90f, 0f, 0f);
		}

		// Remove the cannon ball
		Destroy(this.gameObject);

//		this.GetComponent<MeshRenderer>().enabled = false;
//		this.GetComponent<SphereCollider>().enabled = false;
//		this.GetComponent<CannonBall>().enabled = false;

		//		foreach (ContactPoint contact in collision.contacts)
		//		{
		//			Debug.DrawRay(contact.point, contact.normal, Color.white);
		//		}
		//		if (collision.relativeVelocity.magnitude > 2)
		//			audio.Play();
	}
}
